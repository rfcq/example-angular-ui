{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { User } from 'src/app/models/user';\nexport let UserComponent = class UserComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.userList = [];\n    // this variable is get data from model\n    this.userToModify = new User();\n    // this variable determines wither we are in changing or creating new user\n    this.creatingMode = true;\n    this.getAllUsers();\n  }\n  //Get All Users\n  getAllUsers() {\n    this.userService.getAll().subscribe(response => {\n      this.userList = response;\n    });\n  }\n  //Update User\n  modifyUser() {\n    this.userService.Update(this.userToModify).subscribe(() => {\n      alert(\"User Updated Successfully\");\n      window.location.reload();\n    });\n  }\n  //Create new User\n  CreateUser() {\n    const newUser = {\n      userName: this.userToModify.username,\n      lastName: this.userToModify.surname\n    };\n    this.userService.Create(newUser).subscribe(() => {\n      alert(\"User Added Successfully\");\n      window.location.reload();\n    });\n  }\n  //Delete User\n  deleteUser(userId) {\n    if (confirm(\"Are you sure you want to delete this user !!!\")) {\n      this.userService.Delete(userId).subscribe(() => {\n        alert(\"User Deleted Successfully\");\n        window.location.reload();\n      });\n    }\n  }\n  // function to verify the event\n  openModel(user = new User()) {\n    if (user.id == \"\") {\n      this.userToModify = new User();\n    } else {\n      this.creatingMode = false;\n      this.userToModify = user;\n    }\n  }\n};\nUserComponent = __decorate([Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})], UserComponent);","map":{"version":3,"names":["Component","User","UserComponent","constructor","userService","userList","userToModify","creatingMode","getAllUsers","getAll","subscribe","response","modifyUser","Update","alert","window","location","reload","CreateUser","newUser","userName","username","lastName","surname","Create","deleteUser","userId","confirm","Delete","openModel","user","id","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/rhuanfelipe/repositories/infoshow-ui/infoshow-ui/src/app/components/user/user.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserService } from '../../services/user.service';\nimport { User } from 'src/app/models/user';\n\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent {\n  userList : User[] = [];\n  // this variable is get data from model\n  userToModify : User = new User();\n  // this variable determines wither we are in changing or creating new user\n  creatingMode : boolean = true;\n\n\n  constructor(private userService : UserService){\n    this.getAllUsers();\n  }\n  //Get All Users\n  getAllUsers(){\n    this.userService.getAll().subscribe((response : User[])=>{\n      this.userList = response;\n    });\n  }\n\n  //Update User\n  modifyUser(){\n    this.userService.Update(this.userToModify).subscribe(()=>{\n      alert(\"User Updated Successfully\");\n      window.location.reload();\n    })\n  }\n  //Create new User\n  CreateUser(){\n      const newUser = {\n        userName : this.userToModify.username,\n        lastName : this.userToModify.surname,\n      };\n      this.userService.Create(newUser).subscribe(()=>{\n        alert(\"User Added Successfully\");\n        window.location.reload();\n      });\n  }\n  //Delete User\n  deleteUser(userId : string){\n    if(confirm(\"Are you sure you want to delete this user !!!\")){\n      this.userService.Delete(userId).subscribe(()=>{\n        alert(\"User Deleted Successfully\");\n        window.location.reload();\n      });\n    }\n  }\n  // function to verify the event\n  openModel(user : User = new User()){\n    if(user.id == \"\"){\n      this.userToModify = new User();\n    }else{\n      this.creatingMode = false\n      this.userToModify = user;\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,IAAI,QAAQ,qBAAqB;AAQnC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAQxBC,YAAoBC,WAAyB;IAAzB,KAAAA,WAAW,GAAXA,WAAW;IAP/B,KAAAC,QAAQ,GAAY,EAAE;IACtB;IACA,KAAAC,YAAY,GAAU,IAAIL,IAAI,EAAE;IAChC;IACA,KAAAM,YAAY,GAAa,IAAI;IAI3B,IAAI,CAACC,WAAW,EAAE;EACpB;EACA;EACAA,WAAWA,CAAA;IACT,IAAI,CAACJ,WAAW,CAACK,MAAM,EAAE,CAACC,SAAS,CAAEC,QAAiB,IAAG;MACvD,IAAI,CAACN,QAAQ,GAAGM,QAAQ;IAC1B,CAAC,CAAC;EACJ;EAEA;EACAC,UAAUA,CAAA;IACR,IAAI,CAACR,WAAW,CAACS,MAAM,CAAC,IAAI,CAACP,YAAY,CAAC,CAACI,SAAS,CAAC,MAAI;MACvDI,KAAK,CAAC,2BAA2B,CAAC;MAClCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EACJ;EACA;EACAC,UAAUA,CAAA;IACN,MAAMC,OAAO,GAAG;MACdC,QAAQ,EAAG,IAAI,CAACd,YAAY,CAACe,QAAQ;MACrCC,QAAQ,EAAG,IAAI,CAAChB,YAAY,CAACiB;KAC9B;IACD,IAAI,CAACnB,WAAW,CAACoB,MAAM,CAACL,OAAO,CAAC,CAACT,SAAS,CAAC,MAAI;MAC7CI,KAAK,CAAC,yBAAyB,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EACN;EACA;EACAQ,UAAUA,CAACC,MAAe;IACxB,IAAGC,OAAO,CAAC,+CAA+C,CAAC,EAAC;MAC1D,IAAI,CAACvB,WAAW,CAACwB,MAAM,CAACF,MAAM,CAAC,CAAChB,SAAS,CAAC,MAAI;QAC5CI,KAAK,CAAC,2BAA2B,CAAC;QAClCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;MAC1B,CAAC,CAAC;;EAEN;EACA;EACAY,SAASA,CAACC,IAAA,GAAc,IAAI7B,IAAI,EAAE;IAChC,IAAG6B,IAAI,CAACC,EAAE,IAAI,EAAE,EAAC;MACf,IAAI,CAACzB,YAAY,GAAG,IAAIL,IAAI,EAAE;KAC/B,MAAI;MACH,IAAI,CAACM,YAAY,GAAG,KAAK;MACzB,IAAI,CAACD,YAAY,GAAGwB,IAAI;;EAE5B;CACD;AAtDY5B,aAAa,GAAA8B,UAAA,EALzBhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWjC,aAAa,CAsDzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}